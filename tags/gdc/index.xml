<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GDC on yaotouge's place</title><link>http://yaotouge.github.io/tags/gdc/</link><description>Recent content in GDC on yaotouge's place</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Mar 2023 11:01:47 +0000</lastBuildDate><atom:link href="http://yaotouge.github.io/tags/gdc/index.xml" rel="self" type="application/rss+xml"/><item><title>GDC笔记 Next level render in World of Tank</title><link>http://yaotouge.github.io/posts/wot_gdc/</link><pubDate>Wed, 01 Mar 2023 11:01:47 +0000</pubDate><guid>http://yaotouge.github.io/posts/wot_gdc/</guid><description>又不想刷题了，最近看了坦克世界分享的gdc视频，里面有许多有意思的点子，记录一下。坦克世界战场内可视的范围很大，32km x 32km，但是实际游戏可达区域只有1km x 1km左右（这不能算大世界了），但渲染技术很扎实，结合多种方案，最后的效果也相当不错，主要是阴影，地形和水体。
阴影，Adaptive SM，ScreenSpace，material shadow（视差），cloud，semitransparent），阴影结合了很多种技术，各有不同的侧重，负责场景中的一部分效果。 Adaptive Shadow Map
Semitransparent Shadow
Screen Space Shadow(接触阴影？)
Material Shadow(视差)
Overview
GI（还是lightprobe，但优化了摆放算法，四叉树自适应摆放，高度自适应） Adaptive Probe Placement
Best Fit Placement
Terrain GPU instancing，stiching（对patch 的顶点位移来缝合漏洞） 用距离当作metrics，对地形的基础geometry做LOD，然后根据斜率等对近景做adaptive tesselation（近景可能会有石头，贴花等各种改变近景高度的元素）。highly frequency 高度数据存在（近景地上的石头等）材质中，细分时采样，density map来防止过度的细分导致过高的quad overdraw。
坦克履带和地形碰撞，由于细节的高度图是渲染时用到，存在GPU中，所以CPU这边碰撞时需要从GPU回读。有N帧的延迟
优化terrain的纹理重复pattern，用了micro，macro，global三个层级的纹理混合，有点类似分形噪声？要注意的是，混合时要用当前层级颜色-上一层级的平均，比如macro - avg micro，否则颜色会有问题。
Height based texture blending。但还是很费，最后用的procedural VT（就是RVT？）实现雪地轨迹等动态贴画效果,实时在GPU上压缩为DXT(1/5)格式。
Indirect Map（page table），并没有全部在内存中，而是分了upper level和 bottom level两个层级，就像以前做HLOD那样。
远景 outland，可玩区域只有1km^2（所以这个场景其实还不算很大。。。），整个可视场景是32km^2， inner terrain与outland的模型做混合，用了特殊的材质，模型。
Water Clipmap+static quad tree(preprocess)
Adaptive tesselation(like terrain)
Tiled animation sequences of normal height and caustic</description></item></channel></rss>